{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,SAAU,GAAIH,GACK,iBAAZC,QACdA,QAAgB,OAAID,IAEpBD,EAAa,OAAIC,IARnB,CASGK,MAAM,WACT,wCCVA,MAAMC,UAAeC,KACnBC,cAEEC,SAASC,WACTC,KAAKC,SAAW,MAChBD,KAAKE,OAAS,QAUZC,eACF,OAAOR,EAAOQ,SAASH,MAQrBI,aACF,OAAOT,EAAOS,OAAOJ,MAQnBK,gBACF,OAAOV,EAAOU,UAAUL,MAoBtBM,qBACF,OAAO,IAAIX,EAAOY,eAAeP,KAAKC,SAAUD,MAG9CQ,kBACF,MAAMC,EAAQT,KAAKC,SACbS,EAAK,IAAIf,EAAOK,MACtBU,EAAGC,YAAY,OACfD,EAAGE,SAAS,EAAG,EAAG,EAAG,GACrB,MAAMC,EAAOlB,EAAOmB,aAAaJ,GAEjC,OADAV,KAAKW,YAAYF,GACVI,EAGLE,gBACF,MAAMN,EAAQT,KAAKC,SACbS,EAAK,IAAIf,EAAOK,MACtBU,EAAGC,YAAY,OACfD,EAAGE,SAAS,EAAG,EAAG,EAAG,GACrB,MAAMC,EAAOlB,EAAOqB,WAAWN,GAE/B,OADAV,KAAKW,YAAYF,GACVI,EAGLI,iBACF,OAAOtB,EAAOuB,cAAclB,KAAMA,KAAKE,OAAQF,KAAKC,UAMtDU,YAAYQ,GACV,MAAMC,EAAYC,OAAOrB,KAAKM,gBAC9BN,KAAKC,SAAWkB,EAChB,MAAMG,EAASD,OAAOrB,KAAKM,gBAC3BN,KAAKuB,cAAcD,EAASF,GAQ9BI,UAAUtB,GACRF,KAAKE,OAASA,EAShBuB,YAAYxB,EAAW,MAAOyB,EAAS,YAIrC,OAFW1B,KACRW,YAAYV,GACRN,EAAO8B,YAFHzB,KAEmB0B,GAGhCC,aAAaC,GACX,OAAOjC,EAAOgC,aAAaC,EAAM5B,MAGnCuB,cAAcM,GACZ,OAAOlC,EAAO4B,cAAcM,EAAO7B,MAIrC8B,kBAAoB,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAEzFA,gBAAkBjB,IAChB,MAAMkB,EAAUlB,EAEhB,OADAkB,EAAQC,YAAY,EAAG,EAAG,EAAG,GACtB,IAAIrC,EAAOoC,IAGpBD,cAAgBjB,IACd,MAAMkB,EAAUlB,EAEhB,OADAkB,EAAQC,YAAY,GAAI,GAAI,GAAI,KACzB,IAAIrC,EAAOoC,IAGpBD,iBAAmB,CAACjB,EAAMoB,GAAc,IAASA,EAAiC,IAAlBpB,EAAKqB,SAAiB,EAAIrB,EAAKqB,SAAW,EAAKrB,EAAKqB,SAEpHJ,4BAA8B,CAACF,EAAMO,IAAgB,IAAIxC,EAAO,IAAIC,KAAKuC,GAAaC,UAAoB,MAAPR,GAEnGE,oBAAsB,CAACF,EAAMO,IAAgBA,EAAYE,QAAQF,EAAYG,UAAYV,GAEzFE,qBAAuB,CAACD,EAAOM,IAAgBA,EAAYvB,SAASuB,EAAYI,WAAaV,GAE7FC,qBAAuB,CAACU,EAAKC,GAAO,KAClC,IAAIC,EAAM,GACNF,EAAM,IACRA,IAAQ,EACRE,EAAM,KAGR,MAAMC,EAAI,IAAI/C,KAAK,EAAG,GAEtB,GADA+C,EAAEC,WAAyB,GAAdvB,OAAOmB,GAAY,IAC5BC,EACF,OAAOC,EAAMC,EAAEE,eAAeC,MAAM,EAAG,GAGzC,MAAMC,EAAIJ,EAAEE,eAAeC,MAAM,EAAG,GACpC,IAAIE,EAAM,EACV,OAAON,EAAMK,EAAEE,MAAM,KAAKC,UAAUC,KAAI,CAACC,EAAGC,IAChC,IAANA,GACEhC,OAAO+B,IAAM,KACfJ,EAAM,GAGDM,OAAO,GAAGC,SAAS,EAAG,MAGrB,IAANF,EACKC,OAAOjC,OAAO+B,GAAKJ,GAAKO,SAAS,EAAG,KAGtCH,IACNF,UAAUM,KAAK,KAAKV,MAAM,EAAG,IAWlChB,mBAAqB,CAACjB,EAAMa,EAAS,cACnCA,EAASA,EAAO+B,cAChB,MAAMC,EAAY7C,EAAK8C,cAEvB,OAAQjC,GACN,IAAK,OACH,OAAOgC,EAAUZ,MAAM,EAAG,GAE5B,IAAK,OACH,OAAOY,EAAUT,MAAM,KAAK,GAGhC,OAAOS,EAAUZ,MAAM,GAAI,GAAGc,QAAQ,IAAK,MAG7C9B,oBAAsB+B,IACpB,MAAMhD,EAAO,IAAIjB,KAAKiE,GAChBC,EAAMjD,EAAKqB,SACX6B,EAAOlD,EAAKyB,UAAYwB,GAAe,IAARA,GAAa,EAAI,GAChD/B,EAAU,IAAIpC,EAAOkB,EAAKwB,QAAQ0B,IAExC,OADAhC,EAAQC,YAAY,EAAG,EAAG,EAAG,GACtBD,GAGTD,kBAAoB+B,IAClB,MAAMhD,EAAOlB,EAAOqE,qBAAqB,EAAGrE,EAAOmB,aAAa+C,IAEhE,OADAhD,EAAKmB,YAAY,GAAI,GAAI,GAAI,KACtBnB,GAGTiB,qBAAuB,CAACjB,EAAMX,EAAS,QAASD,GAAW,KACzD,MAAMgE,EAAU,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQN,IAAK,WAKxE,OAJI7D,IACFgE,EAAQhE,SAAWA,GAGdY,EAAKwD,eAAenE,EAAQ+D,IAQrCnC,sBAAwB,MACtBjC,YAAYI,EAAUY,EAAO,IAAIjB,MAC/B,MAAMuB,EAAKN,EAAKwD,eAAe,KAAM,CAAEpE,SAAAA,EAAUqE,UAAW,SAAUrB,MAAM,KAAKH,OAAO,GAAG,GACrFyB,EAAa1D,EAAK2D,WAIlBC,GAHS7E,KAAK8E,MAAM,GAAGH,SAAoB3E,KAAK8E,MAAM,GAAGH,KAAcpD,MAGrD,KACxBnB,KAAK6B,MAAQ4C,EAOfD,WACE,OAAO7E,EAAOgF,cAAc3E,KAAK6B,OAAO,GAQ1C,CAAC+C,OAAOC,aAAaC,GACnB,MAAa,WAATA,EACK9E,KAAK6B,MAGPlC,EAAOgF,cAAc3E,KAAK6B,OAAO,YAK9C,sBD7PA","sources":["webpack://@taw/tempus/webpack/universalModuleDefinition","webpack://@taw/tempus/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Tempus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tempus\"] = factory();\n\telse\n\t\troot[\"Tempus\"] = factory();\n})(self, function() {\nreturn ","class Tempus extends Date {\n  constructor() {\n    // eslint-disable-next-line prefer-rest-params\n    super(...arguments)\n    this.timeZone = 'UTC'\n    this.locale = 'en-US'\n  }\n\n  // public\n\n  /**\n   * Get the start of the day\n   *\n   * @return {Tempus} Start of day\n   */\n  get dayStart() {\n    return Tempus.dayStart(this)\n  }\n\n  /**\n   * Get the end of day\n   *\n   * @return {Tempus} End of day\n   */\n  get dayEnd() {\n    return Tempus.dayEnd(this)\n  }\n\n  /**\n   * Get day of week\n   *\n   * @returns {Number} Day of week (zero index)\n   */\n  get dayOfWeek() {\n    return Tempus.dayOfWeek(this)\n  }\n\n  /**\n   * Get time zone offset\n   *\n   * @example\n   * // returns -4\n   * this.timeZoneOffset.hours;\n   *\n   * @example\n   * // returns -4\n   * Number(this.timeZoneOffset);\n   *\n   * @example\n   * // returns '-04:00'\n   * String(this.timeZoneOffset);\n   *\n   * @return {Tempus.TimeZoneOffset} timezone offset\n   */\n  get timeZoneOffset() {\n    return new Tempus.TimeZoneOffset(this.timeZone, this)\n  }\n\n  get startOfWeek() {\n    const oldTZ = this.timeZone\n    const nd = new Tempus(this)\n    nd.setTimeZone('UTC')\n    nd.setHours(0, 0, 0, 0)\n    const date = Tempus.getWeekStart(nd)\n    this.setTimeZone(oldTZ)\n    return date\n  }\n\n  get endOfWeek() {\n    const oldTZ = this.timeZone\n    const nd = new Tempus(this)\n    nd.setTimeZone('UTC')\n    nd.setHours(0, 0, 0, 0)\n    const date = Tempus.getWeekEnd(nd)\n    this.setTimeZone(oldTZ)\n    return date\n  }\n\n  get localeDate() {\n    return Tempus.getLocaleDate(this, this.locale, this.timeZone)\n  }\n\n  /**\n   * @param {string} tz timeZone Valid time zone (e.g. 'UTC' or 'America/Los_Angeles')\n   */\n  setTimeZone(tz) {\n    const oldOffset = Number(this.timeZoneOffset)\n    this.timeZone = tz\n    const offset = Number(this.timeZoneOffset)\n    this.adjustByHours(offset - oldOffset)\n  }\n\n  /**\n   * Set the locale\n   *\n   * @param {string} locale Valid locale (e.g. 'en-US')\n   */\n  setLocale(locale) {\n    this.locale = locale\n  }\n\n  /**\n   * Convert to SQL formatted string\n   * @param {string} timeZone\n   * @param {string} format\n   * @returns\n   */\n  toSQLString(timeZone = 'UTC', format = 'DATETIME') {\n    // eslint-disable-next-line unicorn/no-this-assignment\n    const nd = this\n    nd.setTimeZone(timeZone)\n    return Tempus.toSQLString(nd, format)\n  }\n\n  adjustByDays(days) {\n    return Tempus.adjustByDays(days, this)\n  }\n\n  adjustByHours(hours) {\n    return Tempus.adjustByHours(hours, this)\n  }\n\n  // static\n  static daysInWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\n  static dayStart = date => {\n    const newDate = date\n    newDate.setUTCHours(0, 0, 0, 0)\n    return new Tempus(newDate)\n  }\n\n  static dayEnd = date => {\n    const newDate = date\n    newDate.setUTCHours(23, 59, 59, 999)\n    return new Tempus(newDate)\n  }\n\n  static dayOfWeek = (date, startMonday = true) => startMonday ? (date.getDay() === 0 ? 6 : date.getDay() - 1) : date.getDay()\n\n  static getDateChangedByDays = (days, initialDate) => new Tempus(new Date(initialDate).getTime() + (days * 86_400_000))\n\n  static adjustByDays = (days, initialDate) => initialDate.setDate(initialDate.getDate() + days)\n\n  static adjustByHours = (hours, initialDate) => initialDate.setHours(initialDate.getHours() + hours)\n\n  static decimalToTime = (num, secs = true) => {\n    let neg = ''\n    if (num < 0) {\n      num *= -1\n      neg = '-'\n    }\n\n    const n = new Date(0, 0)\n    n.setSeconds(Number(num) * 60 * 60)\n    if (secs) {\n      return neg + n.toTimeString().slice(0, 8)\n    }\n\n    const r = n.toTimeString().slice(0, 8)\n    let inc = 0\n    return neg + r.split(':').reverse().map((e, i) => {\n      if (i === 0) {\n        if (Number(e) >= 30) {\n          inc = 1\n        }\n\n        return String(0).padStart(2, '0')\n      }\n\n      if (i === 1) {\n        return String(Number(e) + inc).padStart(2, '0')\n      }\n\n      return e\n    }).reverse().join(':').slice(0, 5)\n  }\n\n  /**\n   * Format in SQL entry style\n   *\n   * @param {Date} date JavaScript Date\n   * @param {string|false} timeZone Valid timezone (e.g. 'America/Los_Angeles'), or false for default system timezone\n   * @param {'DATE'|'DATETIME'|'TIMESTAMP'|'YEAR'} format SQL column type\n   * @returns\n   */\n  static toSQLString = (date, format = 'DATETIME') => {\n    format = format.toLowerCase()\n    const formatted = date.toISOString()\n    // eslint-disable-next-line default-case\n    switch (format) {\n      case 'year':\n        return formatted.slice(0, 4)\n\n      case 'date':\n        return formatted.split('T')[0]\n    }\n\n    return formatted.slice(0, -5).replace('T', ' ')\n  }\n\n  static getWeekStart = _date => {\n    const date = new Date(_date)\n    const day = date.getDay()\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1) // adjust when day is sunday\n    const newDate = new Tempus(date.setDate(diff))\n    newDate.setUTCHours(0, 0, 0, 0)\n    return newDate\n  }\n\n  static getWeekEnd = _date => {\n    const date = Tempus.getDateChangedByDays(6, Tempus.getWeekStart(_date))\n    date.setUTCHours(23, 59, 59, 999)\n    return date\n  }\n\n  static getLocaleDate = (date, locale = 'en-US', timeZone = false) => {\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }\n    if (timeZone) {\n      options.timeZone = timeZone\n    }\n\n    return date.toLocaleString(locale, options)\n  }\n\n  /**\n   * Get time zone offset\n   *\n   * @description Cast as primitive to get desired result\n   */\n  static TimeZoneOffset = class {\n    constructor(timeZone, date = new Date()) {\n      const tz = date.toLocaleString('en', { timeZone, timeStyle: 'long' }).split(' ').slice(-1)[0]\n      const dateString = date.toString()\n      const offset = Date.parse(`${dateString} UTC`) - Date.parse(`${dateString} ${tz}`)\n\n      // return UTC offset in millis\n      const result = offset / 3_600_000\n      this.hours = result\n    }\n\n    /**\n     * Override toString()\n     * @returns {String} time formatted offset\n     */\n    toString() {\n      return Tempus.decimalToTime(this.hours, false)\n    }\n\n    /**\n     * Convert to primitive\n     * @param {string} hint Type hint\n     * @returns {Number|String} Converted type of offset hours\n     */\n    [Symbol.toPrimitive](hint) {\n      if (hint === 'number') {\n        return this.hours\n      }\n\n      return Tempus.decimalToTime(this.hours, false)\n    }\n  }\n}\n\nexport default Tempus\n"],"names":["root","factory","exports","module","define","amd","self","Tempus","Date","constructor","super","arguments","this","timeZone","locale","dayStart","dayEnd","dayOfWeek","timeZoneOffset","TimeZoneOffset","startOfWeek","oldTZ","nd","setTimeZone","setHours","date","getWeekStart","endOfWeek","getWeekEnd","localeDate","getLocaleDate","tz","oldOffset","Number","offset","adjustByHours","setLocale","toSQLString","format","adjustByDays","days","hours","static","newDate","setUTCHours","startMonday","getDay","initialDate","getTime","setDate","getDate","getHours","num","secs","neg","n","setSeconds","toTimeString","slice","r","inc","split","reverse","map","e","i","String","padStart","join","toLowerCase","formatted","toISOString","replace","_date","day","diff","getDateChangedByDays","options","weekday","year","month","toLocaleString","timeStyle","dateString","toString","result","parse","decimalToTime","Symbol","toPrimitive","hint"],"sourceRoot":""}